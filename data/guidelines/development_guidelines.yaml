development_guidelines:
  project_policy:
    - クラウドはAWSを利用します。
    - プロジェクト名はhandsonとします。
    - 環境名はexperimental(検証・実験用)とします。
    - 実装は AWS Well-Architected を参考にします。
    - 優先順位は 1) セキュリティと信頼性、2) オペレーショナルエクセレンスとパフォーマンス効率、3) コスト最適化 の順を基本とし、三者のバランスを加味して決定します。
    - 重要なリソースや作業については必ずログを取ります。
  coding_standards:
    - 別モジュールの呼び出しは必ずmain.tfに記載します。
    - variableブロックは必ずvariables.tfに記載します。
    - variableブロックとoutputブロックには必ず説明を付与します。
    - variableブロックには必ず型を付与します。
    - 呼び出し元でパラメータに差がある場合はvariableブロックを使います(e.g., productionならCPU 4096, developmentなら CPU 1024)。ただしデフォルト値を使ってはいけません。
    - outputブロックの値としてvariableブロックを参照させてはいけません。
    - localsブロックの利用はなるべく避けてください。どうしても利用する場合はlocals.tfに記載します。
    - dataブロックを使いすぎないようにします。使う場合はdataブロックは用いるリソースブロックのすぐ上に記載します。
    - リソースブロックの属性の並びは右記とします。1. If present, The count or for_each meta-argument, 2. Resource-specific non-block parameters, 3. Resource-specific block parameters, 4. If required, a - lifecycle block, 5. If required, the depends_on parameter. あとは制約なしとします。
    - variableブロックの属性の並びは右記とします。1. Type, 2. Description, 3.Default (optional), 4. Sensitive (optional), 5. Validation blocks
    - 略語の使用を避け、正式名称を使用します。(e.g., `[NG] cg [OK] coding guidelines `)。ただし`RDS`や`id`のように固有名詞として用いられている略語は利用できます。
    - セキュリティグループの ingress/egress のような埋め込み属性は避け、aws_security_group_rule など専用リソースで関連付けます。
    - ルートモジュールで aws_default_tags に Environment (e.g., development, production)とService(e.g., ecommerce, auth)を設定します。また、このため個別のリソースでEnvironmentとProjectを決して設定してはいけません。
    - 名称としてNameタグを利用するリソースは極力Nameタグをセットします。この際は"${environment}-${project}-"をprefixとし、その後にリソースの特徴(e.g. api, db)を入力します。
    - リソース名にはスネークケースを使用します（例：web_server）。
    - モジュール内で一点しかないリソースはmainと名付けます。（例: resource "aws_vpc" "main" ）。
    - モジュール内に複数あるリソースは用途に応じた名前をつけます（例: primary、read_replica）。
    - リソース名に複数形を使ってはいけません。
    - リソース名にリソースタイプと重複する名称（例: aws_instance.ec2_instance など）をつけてはいけません。
    - 数値系には単位を付与します（size_gb、ram_size_gb など）。
    - ストレージは MiB/GiB、その他は MB/GB など 10 進単位を使用します。
    - ブール変数は肯定形（enable_external_access など）で命名します。
    - resouces_specification/内のリソースごとのルールも確認してください。
    - ルートモジュール（terraform applyをかけるモジュールのこと）にはterraform.tfvars.jsonを配置します。必要な変数はこちらに記載します。

